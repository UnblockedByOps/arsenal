#!/usr/bin/env python
'''Delete VMs in Arsenal that are in decom status and older than X days.'''
#
#  Copyright 2015 CityGrid Media, LLC
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
import sys
import logging
import argparse
import ConfigParser
import requests

try:
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
except (ImportError, AttributeError):
    pass
# requests is chatty
logging.getLogger("requests").setLevel(logging.WARNING)
try:
    requests.packages.urllib3.disable_warnings()
except AttributeError:
    pass

LOG = logging.getLogger(__name__)

def parse_args():
    '''Parse all the command line arguments.'''

    help_desc = '''
    Delete VMs in Arsenal that are in decom status and older than X days.

    >>> arsenal_vm_expire -x 30
    Provisioning...
    '''

    pap = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                                  description=help_desc)
    pap.add_argument('-a',
                     '--arsenal-server',
                     help='Arsenal server to use.',
                     default='https://arsenal')
    pap.add_argument('-d',
                     '--debug',
                     action='store_true',
                     help='Enable debugging.')
    pap.add_argument('-D',
                     '--dry-run',
                     dest='dry_run',
                     action='store_true',
                     help='Dry run. Do not actually change anything, just print out '
                     'what we would have done.')
    pap.add_argument('-s',
                     '--secrets',
                     help='Secret config file to use.',
                     default='/app/arsenal/conf/arsenal-jenkins.ini')
    pap.add_argument('-S',
                     '--ssl',
                     dest='ssl_verify',
                     help='Whether or not the server is using ssl. Can be True, False, '
                     'or path to ca cert',
                     default=False)
    pap.add_argument('-x',
                     '--expire-days',
                     help='Delete VMs that are older than X days that are in decom status.',
                     default=90)

    return pap.parse_args()

def configure_logging(args):
    '''Set up logging.'''

    if args.debug:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO

    root = logging.getLogger()
    root.setLevel(log_level)

    console = logging.StreamHandler(sys.stdout)
    console.setLevel(log_level)
    if args.dry_run:
        formatter = logging.Formatter('%(levelname)-8s- DRY RUN: %(message)s')
    else:
        formatter = logging.Formatter('%(levelname)-8s- %(message)s')
    console.setFormatter(formatter)
    root.addHandler(console)

def arsenal_login(server, username, password):
    '''Guess what this does'''

    payload = {
        'login': username,
        'password': password,
        'form.submitted': True,
        'api.client': True,
        'return_url': '/api',
    }

    session = requests.Session()
    session.post('{0}/login'.format(server), data=payload, verify=False)
    return session

def register_esx_servers(server, all_esx_data, regex_pattern):
    '''Register esx servers with arsenal.'''

    headers = {'Content-Type': 'application/json'}
    url = '{0}/api/register'.format(server)

    session = arsenal_login(server, 'kaboom', 'password')

    resp = session.put(url, headers=headers, json=esx_server, verify=False)
    resp.faise_for_status()
    LOG.info('    Success.')

def get_vms_to_delete(args):
    '''Get the list of VMs to delete from Arsenal.'''


def main():
    '''Do All the things.'''

    args = parse_args()
    configure_logging(args)

    secrets_config = ConfigParser.ConfigParser()
    secrets_config.read('/Users/abandt/app/arsenal/conf/arsenal_standalone.ini')
    username = secrets_config.get('arsenal', 'username')
    password = secrets_config.get('arsenal', 'password')


    LOG.info('BEGIN gathering esx information and registering with arsenal...')

    vms_to_delete = get_vms_to_delete(args)

    LOG.info('END gathering esx information and registering with arsenal.')

if __name__ == '__main__':
    main()
