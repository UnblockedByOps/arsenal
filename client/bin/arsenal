#!/usr/local/bin/python2.7
'''Arsenal client CLI'''
#
#  Copyright 2015 CityGrid Media, LLC
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
import os
import logging
import argparse
import requests

from arsenalclient.parser.data_centers import parser_data_centers
from arsenalclient.parser.hardware_profiles import parser_hardware_profiles
from arsenalclient.parser.ip_addresses import parser_ip_addresses
from arsenalclient.parser.network_interfaces import parser_network_interfaces
from arsenalclient.parser.node_groups import parser_node_groups
from arsenalclient.parser.nodes import parser_nodes
from arsenalclient.parser.physical_devices import parser_physical_devices
from arsenalclient.parser.physical_elevations import parser_physical_elevations
from arsenalclient.parser.physical_locations import parser_physical_locations
from arsenalclient.parser.physical_racks import parser_physical_racks
from arsenalclient.parser.register import parser_register
from arsenalclient.parser.statuses import parser_statuses
from arsenalclient.parser.tags import parser_tags
from arsenalclient.parser.uid import parser_uid

from arsenalclient.client import Client
from arsenalclient.version import __version__

try:
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
except (ImportError, AttributeError):
    pass

LOG = logging.getLogger(__name__)

# requests is chatty
logging.getLogger("requests").setLevel(logging.WARNING)
try:
    requests.packages.urllib3.disable_warnings()
except AttributeError:
    pass
logging.getLogger("urllib3").setLevel(logging.WARNING)

def _parse_args():
    '''Parse all the command line arguments.'''

    top_parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                                         add_help=False)
    main_parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                                          description='Arsenal CLI')

    main_parser.add_argument('--brief',
                             '-b',
                             action='store_true',
                             help='Print more succinct output in non-json ' \
                             'format, where available.',
                             default=None)
    main_parser.add_argument('--conf',
                             '-c',
                             dest='conf',
                             help='Configuration file to use',
                             default='/app/arsenal/conf/arsenal.ini')
    main_parser.add_argument('--json',
                             '-j',
                             action='store_true',
                             help='Output raw json instead of formatted output for '
                             'search results.')
    main_parser.add_argument('--kookie',
                             '-k',
                             dest='cookie_file',
                             help='Cookie file to use for auth.',
                             default=os.environ['HOME'] + '/.arsenal_cookie')
    main_parser.add_argument('--login',
                             '-l',
                             dest='user_login',
                             help='Login name making the request.',
                             default=os.environ['USER'])
    main_parser.add_argument('--secrets',
                             '-s',
                             dest='secret_conf',
                             help='Secret config file to use.',
                             default=None)
    main_parser.add_argument('--server',
                             dest='api_host',
                             help='arsenal server to use. Overrides the setting in ' \
                             'the config file.',
                             default=None)
    main_parser.add_argument('--quiet',
                             '-q',
                             action='store_true',
                             help='Only log errors.',
                             default=None)
    main_parser.add_argument('--timestamps',
                             '-t',
                             action='store_true',
                             help='Add timestamps to command line logging.',
                             default=None)
    main_parser.add_argument('--version',
                             '-V',
                             action='version',
                             help='Print the version of the client and exit.',
                             version=__version__)
    main_parser.add_argument('--verbose',
                             '-v',
                             action='store_true',
                             help='Enable verbose logging.',
                             default=None)
    main_parser.add_argument('--debug',
                             '-vv',
                             action='store_true',
                             help='Enable debug logging.',
                             default=None)
    main_parser.add_argument('--write_log',
                             '-w',
                             action='store_true',
                             help='Log messages to the log file',
                             default=None)
    main_parser.add_argument('--yes',
                             '-y',
                             action='store_true',
                             dest="answer_yes",
                             help='answer yes to prompts.')

    otsp = main_parser.add_subparsers(title="Object Type",
                                      dest="object_type")

    # Add each subparser to the main parser.
    top_parser, otsp = parser_register(top_parser, otsp)
    top_parser, otsp = parser_uid(top_parser, otsp)
    top_parser, otsp = parser_nodes(top_parser, otsp)
    top_parser, otsp = parser_node_groups(top_parser, otsp)
    top_parser, otsp = parser_statuses(top_parser, otsp)
    top_parser, otsp = parser_tags(top_parser, otsp)
    top_parser, otsp = parser_network_interfaces(top_parser, otsp)
    top_parser, otsp = parser_hardware_profiles(top_parser, otsp)
    top_parser, otsp = parser_ip_addresses(top_parser, otsp)
    top_parser, otsp = parser_data_centers(top_parser, otsp)
    top_parser, otsp = parser_physical_devices(top_parser, otsp)
    top_parser, otsp = parser_physical_elevations(top_parser, otsp)
    top_parser, otsp = parser_physical_locations(top_parser, otsp)
    top_parser, otsp = parser_physical_racks(top_parser, otsp)

    args = main_parser.parse_args()

    if args.object_type == 'nodes' and args.action_command == 'delete':
        if not (args.node_name or args.unique_id or args.node_id):
            otsp.choices['nodes'].error('Too few parameters, please specify at least one '
                                        'of --name, --unique_id or --id')

    return args

def main():
    '''The earth-shattering kaboom.'''

    # parse the args
    args = _parse_args()

    client = Client(args.conf, args.secret_conf, args)

    # call whatever function was selected
    try:
        args.func(args, client)
    except AttributeError:
        argparse.ArgumentParser().error('too few arguments')

if __name__ == '__main__':
    main()
